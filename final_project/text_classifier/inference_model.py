# ================================
# üß† Text Classification Inference
# ================================

import pickle
import os
import numpy as np

# --- –ü—É—Ç–∏ ---
BASE_DIR = os.path.dirname(__file__)
MODEL_PATH = os.path.join(BASE_DIR, "svm_best_model.pkl")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
with open(MODEL_PATH, "rb") as f:
    model = pickle.load(f)

# --- –ú–∞–ø–ø–∏–Ω–≥ —á–∏—Å–ª–æ–≤—ã—Ö –º–µ—Ç–æ–∫ ---
# (–µ—Å–ª–∏ LabelEncoder –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –∑–∞–¥–∞—ë–º –≤—Ä—É—á–Ω—É—é)
LABELS = {
    2: "low",
    1: "medium",
    0: "high"
}

def predict_priority(text: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ–∫—Å—Ç–∞ (low/medium/high)."""
    if not text or len(text.strip()) == 0:
        return "unknown"

    try:
        pred = model.predict([text])[0]
    except Exception as e:
        print("‚ö†Ô∏è Prediction error:", e)
        return "unknown"

    # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —á–∏—Å–ª–æ ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    if isinstance(pred, (np.integer, int, float)):
        pred = int(pred)
        return LABELS.get(pred, f"unknown ({pred})")

    # –ï—Å–ª–∏ —É–∂–µ —Å—Ç—Ä–æ–∫–∞
    return str(pred).lower()